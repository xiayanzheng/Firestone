version: '3.2'
networks:
  frontend:
    external:
      name: reverse-proxy-docker-traefik_routing
services:
    changedetection:
      image: ghcr.io/dgtlmoon/changedetection.io
      container_name: changedetection
      networks:
        - frontend
      hostname: changedetection
      labels:
        - "traefik.enable=true"
        - traefik.http.routers.yourServices-http.rule=Host(`cd.novaspark.io`)
        - traefik.http.routers.yourServices-http.entrypoints=http
        - traefik.http.routers.yourServices-http.middlewares=https-redirect
        - "traefik.http.routers.yourServices.rule=Host(`cd.novaspark.io`)"
        - "traefik.http.routers.yourServices.entrypoints=https"
        - "traefik.http.routers.yourServices.tls.certresolver=myresolver"
      volumes:
        - changedetection-data:/datastore
# Configurable proxy list support, see https://github.com/dgtlmoon/changedetection.io/wiki/Proxy-configuration#proxy-list-support
#        - ./proxies.json:/datastore/proxies.json

      environment:
    #        Default listening port, can also be changed with the -p option
        # - PORT=5000

        # - PUID=1000
        # - PGID=1000

    #       Alternative WebDriver/selenium URL, do not use "'s or 's!
        - WEBDRIVER_URL=http://browser-chrome:4444/wd/hub
  #
  #       WebDriver proxy settings webdriver_proxyType, webdriver_ftpProxy, webdriver_noProxy,
  #                                webdriver_proxyAutoconfigUrl, webdriver_autodetect,
  #                                webdriver_socksProxy, webdriver_socksUsername, webdriver_socksVersion, webdriver_socksPassword
  #
  #             https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.proxy
  #
  #       Alternative Playwright URL, do not use "'s or 's!
  #      - PLAYWRIGHT_DRIVER_URL=ws://playwright-chrome:3000/?stealth=1&--disable-web-security=true
  #
  #       Playwright proxy settings playwright_proxy_server, playwright_proxy_bypass, playwright_proxy_username, playwright_proxy_password
  #
  #             https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-proxy
  #
  #        Plain requests - proxy support example.
  #      - HTTP_PROXY=socks5h://10.10.1.10:1080
  #      - HTTPS_PROXY=socks5h://10.10.1.10:1080
  #
  #        An exclude list (useful for notification URLs above) can be specified by with
  #      - NO_PROXY="localhost,192.168.0.0/24"
  #
  #        Base URL of your changedetection.io install (Added to the notification alert)
  #      - BASE_URL=https://mysite.com
  #        Respect proxy_pass type settings, `proxy_set_header Host "localhost";` and `proxy_set_header X-Forwarded-Prefix /app;`
  #        More here https://github.com/dgtlmoon/changedetection.io/wiki/Running-changedetection.io-behind-a-reverse-proxy-sub-directory
  #      - USE_X_SETTINGS=1
  #
  #        Hides the `Referer` header so that monitored websites can't see the changedetection.io hostname.
  #      - HIDE_REFERER=true

      # Comment out ports: when using behind a reverse proxy , enable networks: etc.
      ports:
        - 5000:5000
      restart: unless-stopped

     # Used for fetching pages via WebDriver+Chrome where you need Javascript support.
     # Now working on arm64 (needs testing on rPi - tested on Oracle ARM instance)
     # replace image with seleniarm/standalone-chromium:4.0.0-20211213

     # If WEBDRIVER or PLAYWRIGHT are enabled, changedetection container depends on that
     # and must wait before starting (substitute "browser-chrome" with "playwright-chrome" if last one is used)
      depends_on:
          browser-chrome:
              condition: service_started

    browser-chrome:
      hostname: browser-chrome
      networks:
        - frontend
      image: selenium/standalone-chrome-debug:3.141.59
      environment:
          - VNC_NO_PASSWORD=1
          - SCREEN_WIDTH=1920
          - SCREEN_HEIGHT=1080
          - SCREEN_DEPTH=24
      volumes:
          # Workaround to avoid the browser crashing inside a docker container
          # See https://github.com/SeleniumHQ/docker-selenium#quick-start
          - /dev/shm:/dev/shm
      restart: unless-stopped


    traefik:
      image: "traefik:latest"
      container_name: "traefik"
      restart: unless-stopped
      networks:
        - frontend
      ports:
        - "80:80"
        - "443:443"
        - "8080:8080"
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # Dashboard HTTP here
        - traefik.http.routers.traefik.rule=Host(`cd.novaspark.io`)
        - traefik.http.routers.traefik.entrypoints=http
        - traefik.http.routers.traefik.middlewares=https-redirect
        # Dashboard HTTPS here
        - traefik.http.routers.traefik-https.rule=Host(`cd.novaspark.io`)
        - traefik.http.routers.traefik-https.entrypoints=https
        - traefik.http.routers.traefik-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-https.service=api@internal
        # Use the Let's Encrypt resolver created below
        - traefik.http.routers.traefik-https.tls.certresolver=myresolver
      command:
        # Enable the Traefik log, for configurations and errors
        - --log
        # Enable the Dashboard and API
        - --api
        - "--providers.docker=true"
        - "--providers.docker.exposedbydefault=false"
        # Create an entrypoint "http" listening on address 80
        - --entrypoints.http.address=:80
        # Create an entrypoint "https" listening on address 443
        - --entrypoints.https.address=:443
        - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
        # - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=http"
        #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
        - "--certificatesresolvers.myresolver.acme.email=your@email.addr"
        - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      volumes:
        - "./letsencrypt:/letsencrypt"
        - "/var/run/docker.sock:/var/run/docker.sock:ro"

     # Used for fetching pages via Playwright+Chrome where you need Javascript support.

#    playwright-chrome:
#        hostname: playwright-chrome
#        image: browserless/chrome
#        restart: unless-stopped
#        environment:
#            - SCREEN_WIDTH=1920
#            - SCREEN_HEIGHT=1024
#            - SCREEN_DEPTH=16
#            - ENABLE_DEBUGGER=false
#            - PREBOOT_CHROME=true
#            - CONNECTION_TIMEOUT=300000
#            - MAX_CONCURRENT_SESSIONS=10
#            - CHROME_REFRESH_TIME=600000
#            - DEFAULT_BLOCK_ADS=true
#            - DEFAULT_STEALTH=true
#
#             Ignore HTTPS errors, like for self-signed certs
#            - DEFAULT_IGNORE_HTTPS_ERRORS=true
#
volumes:
  changedetection-data: